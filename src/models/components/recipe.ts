/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type Recipe = {
  /**
   * Unique identifier for the recipe
   */
  id?: string | undefined;
  /**
   * Name of the recipe
   */
  name?: string | undefined;
  /**
   * List of ingredients
   */
  ingredients?: Array<string> | undefined;
  /**
   * Cooking instructions for the recipe
   */
  instructions?: string | undefined;
  /**
   * Number of servings
   */
  servings?: number | undefined;
  /**
   * Preparation time in minutes
   */
  prepTime?: number | undefined;
};

/** @internal */
export const Recipe$inboundSchema: z.ZodType<Recipe, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    ingredients: z.array(z.string()).optional(),
    instructions: z.string().optional(),
    servings: z.number().int().optional(),
    prepTime: z.number().int().optional(),
  });

/** @internal */
export type Recipe$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  ingredients?: Array<string> | undefined;
  instructions?: string | undefined;
  servings?: number | undefined;
  prepTime?: number | undefined;
};

/** @internal */
export const Recipe$outboundSchema: z.ZodType<
  Recipe$Outbound,
  z.ZodTypeDef,
  Recipe
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  ingredients: z.array(z.string()).optional(),
  instructions: z.string().optional(),
  servings: z.number().int().optional(),
  prepTime: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Recipe$ {
  /** @deprecated use `Recipe$inboundSchema` instead. */
  export const inboundSchema = Recipe$inboundSchema;
  /** @deprecated use `Recipe$outboundSchema` instead. */
  export const outboundSchema = Recipe$outboundSchema;
  /** @deprecated use `Recipe$Outbound` instead. */
  export type Outbound = Recipe$Outbound;
}
