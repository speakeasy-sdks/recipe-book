/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type AuthErrorData = {
  message?: string | undefined;
};

export class AuthError extends Error {
  /** The original data that was passed to this error instance. */
  data$: AuthErrorData;

  constructor(err: AuthErrorData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    this.name = "AuthError";
  }
}

/** @internal */
export const AuthError$inboundSchema: z.ZodType<
  AuthError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
})
  .transform((v) => {
    return new AuthError(v);
  });

/** @internal */
export type AuthError$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const AuthError$outboundSchema: z.ZodType<
  AuthError$Outbound,
  z.ZodTypeDef,
  AuthError
> = z.instanceof(AuthError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthError$ {
  /** @deprecated use `AuthError$inboundSchema` instead. */
  export const inboundSchema = AuthError$inboundSchema;
  /** @deprecated use `AuthError$outboundSchema` instead. */
  export const outboundSchema = AuthError$outboundSchema;
  /** @deprecated use `AuthError$Outbound` instead. */
  export type Outbound = AuthError$Outbound;
}
